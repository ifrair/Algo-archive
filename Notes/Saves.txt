const int MAXN = ...; // число вершин
const int INF = 1000000000; // константа-бесконечность

struct edge {
    int a, b, cap, flow;
};

int n, s, t, d[MAXN], ptr[MAXN], q[MAXN];
vector<edge> e;
vector<int> g[MAXN];

void add_edge (int a, int b, int cap) {
    edge e1 = { a, b, cap, 0 };
    edge e2 = { b, a, 0, 0 };
    g[a].push_back ((int) e.size());
    e.push_back (e1);
    g[b].push_back ((int) e.size());
    e.push_back (e2);
}

bool bfs() {
    int qh=0, qt=0;
    q[qt++] = s;
    memset (d, -1, n * sizeof d[0]);
    d[s] = 0;
    while (qh < qt && d[t] == -1) {
        int v = q[qh++];
        for (size_t i=0; i<g[v].size(); ++i) {
            int id = g[v][i],
                to = e[id].b;
            if (d[to] == -1 && e[id].flow < e[id].cap) {
                q[qt++] = to;
                d[to] = d[v] + 1;
            }
        }
    }
    return d[t] != -1;
}

int dfs (int v, int flow) {
    if (!flow)  return 0;
    if (v == t)  return flow;
    for (; ptr[v]<(int)g[v].size(); ++ptr[v]) {
        int id = g[v][ptr[v]],
            to = e[id].b;
        if (d[to] != d[v] + 1)  continue;
        int pushed = dfs (to, min (flow, e[id].cap - e[id].flow));
        if (pushed) {
            e[id].flow += pushed;
            e[id^1].flow -= pushed;
            return pushed;
        }
    }
    return 0;
}

int dinic() {
    int flow = 0;
    for (;;) {
        if (!bfs())  break;
        memset (ptr, 0, n * sizeof ptr[0]);
        while (int pushed = dfs (s, INF))
            flow += pushed;
    }
    return flow;
}





В основе дискретного преобразования Фурье лежат комплексные числа, корни n-ой степени из единицы. Для эффективного его вычисления использовались такие особенности корней, как существование n различных корней, образующих группу (т.е. степень одного корня — всегда другой корень; среди них есть один элемент — генератор группы, называемый примитивным корнем).

Но то же самое верно и в отношении корней n-ой степени из единицы в модульной арифметике. Точнее, не для любого модуля p найдётся n различных корней из единицы, однако такие модули всё же существуют. По-прежнему нам важно найти среди них примитивный корень, т.е.:

 (w_n)^n = 1 \pmod p,
 (w_n)^k \ne 1 {\pmod p}, ~~~~~1 \le k < n.

Все остальные n-1 корней n-ой степени из единицы по модулю p можно получить как степени примитивного корня w_n (как и в комплексном случае).

Для применения в алгоритме Быстрого преобразования Фурье нам было нужно, чтобы примивный корень существовал для некоторого n, являвшегося степенью двойки, а также всех меньших степеней. И если в комплексном случае примитивный корень существовал для любого n, то в случае модульной арифметики это, вообще говоря, не так. Однако, заметим, что если n = 2^k, т.е. k-ая степень двойки, то по модулю m = 2^{k-1} имеем:

 (w_n^2)^m = (w_n)^n = 1 \pmod p,
 (w_n^2)^k = w_n^{2k} \ne 1 {\pmod p}, ~~~~~1 \le [...]

Таким образом, если w_n — примитивный корень n=2^k-ой степени из единицы, то w_n^2 — примитивный корень 2^{k-1}-ой степени из единицы. Следовательно, для всех степеней двойки, меньших n, примитивные корни нужной степени также существуют, и могут быть вычислены как соответствующие степени w_n.

Последний штрих — для обратного ДПФ мы использовали вместо w_n обратный ему элемент: w_n^{-1}. Но по простому модулю p обратный элемент также всегда найдётся.

Таким образом, все нужные нам свойства соблюдаются и в случае модульной арифметики, при условии, что мы выбрали некоторый достаточно большой модуль p и нашли в нём примитивный корень n-ой степени из единицы.

Например, можно взять такие значения: модуль p = 7340033, w_{2^{20}} = 5. Если этого модуля будет недостаточно, для нахождения другой пары можно воспользоваться фактом, что для модулей вида c 2^k + 1 (но по-прежнему обязательно простых) всегда найдётся примитивный корень степени 2^k из единицы.

const int mod = 7340033;
const int root = 5;
const int root_1 = 4404020;
const int root_pw = 1<<20;

void fft (vector<int> & a, bool invert) {
    int n = (int) a.size();

    for (int i=1, j=0; i<n; ++i) {
        int bit = n >> 1;
        for (; j>=bit; bit>>=1)
            j -= bit;
        j += bit;
        if (i < j)
            swap (a[i], a[j]);
    }

    for (int len=2; len<=n; len<<=1) {
        int wlen = invert ? root_1 : root;
        for (int i=len; i<root_pw; i<<=1)
            wlen = int (wlen * 1ll * wlen % mod);
        for (int i=0; i<n; i+=len) {
            int w = 1;
            for (int j=0; j<len/2; ++j) {
                int u = a[i+j],  v = int (a[i+j+len/2] * 1ll * w % mod);
                a[i+j] = u+v < mod ? u+v : u+v-mod;
                a[i+j+len/2] = u-v >= 0 ? u-v : u-v+mod;
                w = int (w * 1ll * wlen % mod);
            }
        }
    }
    if (invert) {
        int nrev = reverse (n, mod);
        for (int i=0; i<n; ++i)
            a[i] = int (a[i] * 1ll * nrev % mod);
    }
}
Здесь функция \rm reverse находит обратный к n элемент по модулю \rm mod (см. Обратный элемент в поле по модулю). Константы \rm mod, \rm root \rm root\_pw определяют модуль и примитивный корень, а \rm root\_1 — обратный к \rm root элемент по модулю \rm mod.

Как показывает практика, реализация целочисленного ДПФ работает даже медленней реализации с комплексными числами (из-за огромного количества операций взятия по модулю), однако она имеет такие преимущества, как меньшее использование памяти и отсутствие погрешностей округления.
